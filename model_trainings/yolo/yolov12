{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":105247,"databundleVersionId":13166279,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"DATA PROCESS","metadata":{}},{"cell_type":"code","source":"from __future__ import annotations\nimport argparse, csv, math\nfrom pathlib import Path\nfrom typing import List, Tuple\n\nimport cv2\nimport numpy as np\nfrom tqdm import tqdm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-26T11:48:03.067074Z","iopub.execute_input":"2025-07-26T11:48:03.067783Z","iopub.status.idle":"2025-07-26T11:48:03.071346Z","shell.execute_reply.started":"2025-07-26T11:48:03.067759Z","shell.execute_reply":"2025-07-26T11:48:03.070812Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"\"\"\"\n==============================\n1. CSV ➜ YOLO labels (cx cy w h нормалізовано)\n2. Приведення bbox до валідних координат (clip 0…W/H)\n3. Обробка порожніх сцен (-1 -1 -1 -1)\n4. Тайлінг 640×640 з overlap 25 %, min_area 20 %, ≤20 % negative tiles\n\"\"\"\n\n# ──────────────────────────── helpers ────────────────────────────────── #\n\nCLASS_MAP = {0: \"explosive\", 1: \"anti_personnel\", 2: \"anti_vehicle\"}  # для читабельності\n\ndef clip(val: float, lo: float, hi: float) -> float:\n    return max(lo, min(val, hi))\n\ndef csv_row_to_abs(row: dict) -> Tuple[int, int, int, int, int]:\n    \"\"\"\n    CSV → (cls, x_min, y_min, x_max, y_max)\n    Обов’язково кліпаємо координати у межах картинки (іноді розмітка «виїжджає» назовні).\n    \"\"\"\n    cls = int(row[\"label\"])\n    x_min = int(row[\"x\"])\n    y_min = int(row[\"y\"])\n    w, h = int(row[\"width\"]), int(row[\"height\"])\n    img_w, img_h = int(row[\"image_width\"]), int(row[\"image_height\"])\n    x_max = clip(x_min + w, 0, img_w)\n    y_max = clip(y_min + h, 0, img_h)\n    x_min = clip(x_min, 0, img_w)\n    y_min = clip(y_min, 0, img_h)\n    return cls, x_min, y_min, x_max, y_max\n\ndef abs_to_yolo(x0, y0, x1, y1, img_w, img_h):\n    bw, bh = x1 - x0, y1 - y0\n    cx, cy = x0 + bw / 2, y0 + bh / 2\n    return cx / img_w, cy / img_h, bw / img_w, bh / img_h\n\ndef intersect(box, tile):\n    bx0, by0, bx1, by1 = box\n    tx0, ty0, tx1, ty1 = tile\n    ix0, iy0 = max(bx0, tx0), max(by0, ty0)\n    ix1, iy1 = min(bx1, tx1), min(by1, ty1)\n    if ix0 >= ix1 or iy0 >= iy1:\n        return None, 0.0\n    inter_area = (ix1 - ix0) * (iy1 - iy0)\n    orig_area = (bx1 - bx0) * (by1 - by0)\n    return (ix0, iy0, ix1, iy1), inter_area / orig_area","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-26T11:48:06.793173Z","iopub.execute_input":"2025-07-26T11:48:06.793749Z","iopub.status.idle":"2025-07-26T11:48:06.802613Z","shell.execute_reply.started":"2025-07-26T11:48:06.793725Z","shell.execute_reply":"2025-07-26T11:48:06.801763Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"# ─────────────────────── 1. CSV ➜ temp YOLO  ────────────────────────── #\n\ndef csv_to_yolo(csv_path: Path, yolo_path: Path):\n    \"\"\"\n    Конвертує один .csv у YOLO‑txt.\n    Якщо в .csv лише рядок «‑1 ‑1 ‑1 ‑1» → створює порожній файл (negative scene).\n    \"\"\"\n    with csv_path.open() as f_in, yolo_path.open(\"w\") as f_out:\n        reader = csv.DictReader(f_in)\n        empty_scene = True\n        for row in reader:\n            if row[\"x\"] == \"-1\":  # офіційний маркер порожньої сцени\n                continue\n            empty_scene = False\n            cls, x0, y0, x1, y1 = csv_row_to_abs(row)\n            img_w, img_h = int(row[\"image_width\"]), int(row[\"image_height\"])\n            cx, cy, bw, bh = abs_to_yolo(x0, y0, x1, y1, img_w, img_h)\n            f_out.write(f\"{cls} {cx:.6f} {cy:.6f} {bw:.6f} {bh:.6f}\\n\")\n        if empty_scene:\n            # створюємо порожній файл, щоб скрипт тайлінгу знав: negative scene\n            pass\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-26T11:48:10.469352Z","iopub.execute_input":"2025-07-26T11:48:10.469633Z","iopub.status.idle":"2025-07-26T11:48:10.475556Z","shell.execute_reply.started":"2025-07-26T11:48:10.469610Z","shell.execute_reply":"2025-07-26T11:48:10.474799Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"\n# ─────────────────────── 2. Tile generator  ─────────────────────────── #\n\ndef tile_image(\n    img_path: Path,\n    yolo_path: Path,\n    dst_img: Path,\n    dst_lbl: Path,\n    tile=640,\n    overlap=0.25,\n    min_area=0.2,\n    max_neg_ratio=0.2,\n):\n    img = cv2.imread(str(img_path))\n    if img is None:\n        raise IOError(img_path)\n    H, W = img.shape[:2]\n\n    # читаємо тимчасові YOLO‑бокси (або порожній список)\n    labels = []\n    if yolo_path.exists() and yolo_path.stat().st_size:\n        for line in yolo_path.read_text().splitlines():\n            cls, cx, cy, bw, bh = map(float, line.split())\n            bx0 = (cx - bw / 2) * W\n            by0 = (cy - bh / 2) * H\n            bx1 = (cx + bw / 2) * W\n            by1 = (cy + bh / 2) * H\n            labels.append((int(cls), bx0, by0, bx1, by1))\n\n    stride = int(tile * (1 - overlap))\n    nx = math.ceil((W - tile) / stride) + 1\n    ny = math.ceil((H - tile) / stride) + 1\n    neg_allowed = math.ceil(nx * ny * max_neg_ratio)\n    neg_cnt = 0\n\n    for iy in range(ny):\n        for ix in range(nx):\n            x0, y0 = ix * stride, iy * stride\n            x1, y1 = clip(x0 + tile, 0, W), clip(y0 + tile, 0, H)\n\n            patch = img[y0:y1, x0:x1]\n            # паддінг, якщо обітнутий край\n            if patch.shape[0] < tile or patch.shape[1] < tile:\n                patch = cv2.copyMakeBorder(\n                    patch,\n                    0,\n                    tile - patch.shape[0],\n                    0,\n                    tile - patch.shape[1],\n                    cv2.BORDER_CONSTANT,\n                    value=(114, 114, 114),\n                )\n\n            tile_boxes: List[str] = []\n            for cls, bx0, by0, bx1, by1 in labels:\n                clipped, ioa = intersect((bx0, by0, bx1, by1), (x0, y0, x1, y1))\n                if ioa >= min_area:\n                    cx, cy, bw, bh = abs_to_yolo(\n                        clipped[0] - x0, clipped[1] - y0,\n                        clipped[2] - x0, clipped[3] - y0,\n                        tile, tile\n                    )\n                    tile_boxes.append(f\"{cls} {cx:.6f} {cy:.6f} {bw:.6f} {bh:.6f}\")\n\n            # баланс негативів\n            if not tile_boxes and neg_cnt >= neg_allowed:\n                continue\n            if not tile_boxes:\n                neg_cnt += 1\n\n            name = f\"{img_path.stem}_{iy}_{ix}\"\n            cv2.imwrite(str(dst_img / f\"{name}.jpg\"), patch)\n            (dst_lbl / f\"{name}.txt\").write_text(\"\\n\".join(tile_boxes))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-26T11:48:13.807724Z","iopub.execute_input":"2025-07-26T11:48:13.808086Z","iopub.status.idle":"2025-07-26T11:48:13.827153Z","shell.execute_reply.started":"2025-07-26T11:48:13.808065Z","shell.execute_reply":"2025-07-26T11:48:13.825965Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"# ------------------- IMPORTS -------------------------------------------------\nfrom pathlib import Path\nfrom itertools import chain\nfrom tqdm.notebook import tqdm\n\n# якщо функції csv_to_yolo та tile_image лежать у власному модулі:\n# from utils.tiling import csv_to_yolo, tile_image\n\n# ------------------- ПАРАМЕТРИ ----------------------------------------------\nDATA_ROOT  = Path(\"/kaggle/input/uadamage-demining-competition\")\nTRAIN_DIR  = DATA_ROOT / \"train\"           # містить images/ та annotations/\nTEST_DIR   = DATA_ROOT / \"test\"            # (не використовується тут, але лишив як приклад)\n\nOUT_DIR    = Path(\"/kaggle/working/out\")   # тут збережемо готові тайли\nTMP_DIR    = Path(\"/kaggle/working/tmp\")   # тимчасові YOLO‑мітки\n\nTILE_SIZE  = 640\nOVERLAP    = 0.25\nMIN_AREA   = 0.20\nMAX_NEG    = 0.20\n\n# ------------------- ШЛЯХИ ---------------------------------------------------\nIMG_DIR   = TRAIN_DIR / \"images\"\nANN_DIR   = TRAIN_DIR / \"annotations\"\nOUT_IMG   = OUT_DIR / \"images\"\nOUT_LBL   = OUT_DIR / \"labels\"\n\n# створюємо потрібні writable‑теки\nfor p in (OUT_IMG, OUT_LBL, TMP_DIR):\n    p.mkdir(parents=True, exist_ok=True)\n\n# ------------------- ЗБІР СПИСКУ ЗОБРАЖЕНЬ -----------------------------------\nIMG_EXTS = (\"*.jpg\", \"*.jpeg\", \"*.JPG\", \"*.JPEG\")\nimage_paths = list(chain.from_iterable(IMG_DIR.glob(p) for p in IMG_EXTS))\n\nprint(f\"Знайдено {len(image_paths)} зображень\")\n\n# ------------------- ОСНОВНИЙ ЦИКЛ ------------------------------------------\ni=0\nfor img_path in tqdm(sorted(image_paths), desc=\"CSV → YOLO & tiling\"):\n    csv_path = ANN_DIR / f\"{img_path.stem}.csv\"\n    if not csv_path.exists():\n        # CSV відсутній → пропускаємо (часто буває, наприклад, для test‑кадрів)\n        print(f\"[WARN] {csv_path.name} відсутній, пропускаю\")\n        continue\n\n    tmp_lbl = TMP_DIR / f\"{img_path.stem}.txt\"\n\n    # 1) CSV → тимчасовий YOLO\n    csv_to_yolo(csv_path, tmp_lbl)\n\n    # 2) Тайлимо зображення + мітки\n    tile_image(\n        img_path,\n        tmp_lbl,\n        OUT_IMG,\n        OUT_LBL,\n        tile=TILE_SIZE,\n        overlap=OVERLAP,\n        min_area=MIN_AREA,\n        max_neg_ratio=MAX_NEG,\n    )\n\n    # 3) Видаляємо тимчасовий файл\n    tmp_lbl.unlink()\n    i += 1\n    if i>6000:\n        break\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-26T11:48:16.336598Z","iopub.execute_input":"2025-07-26T11:48:16.336888Z","iopub.status.idle":"2025-07-26T12:18:16.537565Z","shell.execute_reply.started":"2025-07-26T11:48:16.336868Z","shell.execute_reply":"2025-07-26T12:18:16.536626Z"}},"outputs":[{"name":"stdout","text":"Знайдено 7722 зображень\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"CSV → YOLO & tiling:   0%|          | 0/7722 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"04ee0e2c4af64b7f983bf6dad473e3ff"}},"metadata":{}},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)","\u001b[0;31mOSError\u001b[0m: [Errno 28] No space left on device","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/3458207628.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     50\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m     \u001b[0;31m# 2) Тайлимо зображення + мітки\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m     tile_image(\n\u001b[0m\u001b[1;32m     53\u001b[0m         \u001b[0mimg_path\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m         \u001b[0mtmp_lbl\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_36/3551156307.py\u001b[0m in \u001b[0;36mtile_image\u001b[0;34m(img_path, yolo_path, dst_img, dst_lbl, tile, overlap, min_area, max_neg_ratio)\u001b[0m\n\u001b[1;32m     70\u001b[0m             \u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"{img_path.stem}_{iy}_{ix}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m             \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdst_img\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;34mf\"{name}.jpg\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m             \u001b[0;34m(\u001b[0m\u001b[0mdst_lbl\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;34mf\"{name}.txt\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtile_boxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/lib/python3.11/pathlib.py\u001b[0m in \u001b[0;36mwrite_text\u001b[0;34m(self, data, encoding, errors, newline)\u001b[0m\n\u001b[1;32m   1076\u001b[0m                             data.__class__.__name__)\n\u001b[1;32m   1077\u001b[0m         \u001b[0mencoding\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtext_encoding\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1078\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'w'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mencoding\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnewline\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnewline\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1079\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1080\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mOSError\u001b[0m: [Errno 28] No space left on device"],"ename":"OSError","evalue":"[Errno 28] No space left on device","output_type":"error"}],"execution_count":6},{"cell_type":"code","source":"# ------------------- IMPORTS -------------------------------------------------\nfrom pathlib import Path\nimport random\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\n# ------------------- ПАРАМЕТРИ ----------------------------------------------\nIMG_DIR = Path(\"/kaggle/working/out/images\")   # де лежать тайли (або train/images)\nLBL_DIR = Path(\"/kaggle/working/out/labels\")   # відповідні .txt‑файли\nEXTS    = (\"*.jpg\", \"*.jpeg\", \"*.png\")         # розширення зображень\nN_SHOW  = 10                                   # скільки показати\nRANDOM  = True                                 # True → випадкові; False → перші N_SHOW\n\n# Якщо хочете відображати назви класів, упишіть їх у список нижче\nCLASS_NAMES = [\n    \"UXO\",    # id 0\n    \"Other\",  # id 1\n]\n\n# ------------------- ЗБІР ФАЙЛІВ --------------------------------------------\nimages = []\nfor pat in EXTS:\n    images.extend(IMG_DIR.glob(pat))\n\nif len(images) < N_SHOW:\n    raise ValueError(f\"У теці лише {len(images)} файлів — треба ≥ {N_SHOW}\")\n\nimages = random.sample(images, N_SHOW) if RANDOM else images[:N_SHOW]\n\n# ------------------- ВІЗУАЛІЗАЦІЯ -------------------------------------------\nn_cols, n_rows = 5, 2\nfig, axes = plt.subplots(n_rows, n_cols, figsize=(15, 6))\n\nfor ax, img_path in zip(axes.flatten(), images):\n    # --- зображення ---\n    img = Image.open(img_path).convert(\"RGB\")\n    w, h = img.size\n    ax.imshow(img)\n\n    # --- шукаємо label-файл ---\n    lbl_path = LBL_DIR / (img_path.stem + \".txt\")\n    if lbl_path.exists():\n        with lbl_path.open() as f:\n            for line in f:\n                cls, xc, yc, bw, bh = map(float, line.split())\n                # YOLO координати → пікселі\n                x0 = (xc - bw/2) * w\n                y0 = (yc - bh/2) * h\n                box_w = bw * w\n                box_h = bh * h\n                # прямокутник\n                rect = patches.Rectangle(\n                    (x0, y0), box_w, box_h,\n                    linewidth=2,\n                    fill=False,\n                )\n                ax.add_patch(rect)\n                # напис класу (за наявності)\n                cls_id = int(cls)\n                if 0 <= cls_id < len(CLASS_NAMES):\n                    ax.text(\n                        x0, y0 - 2,\n                        CLASS_NAMES[cls_id],\n                        fontsize=8,\n                        weight=\"bold\",\n                        bbox=dict(facecolor=\"white\", alpha=0.5, pad=1),\n                    )\n    else:\n        ax.set_title(\"label not found\", fontsize=8, color=\"red\")\n\n    ax.set_axis_off()\n\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install ultralytics\n!pip install wandb\n!yolo settings wandb=True\nimport wandb\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nwandb_key = user_secrets.get_secret(\"WANDB_API_KEY\")\nwandb.login(key=wandb_key)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-26T07:22:21.578984Z","iopub.execute_input":"2025-07-26T07:22:21.579140Z","iopub.status.idle":"2025-07-26T07:23:49.831127Z","shell.execute_reply.started":"2025-07-26T07:22:21.579124Z","shell.execute_reply":"2025-07-26T07:23:49.830571Z"},"collapsed":true,"jupyter":{"outputs_hidden":true}},"outputs":[{"name":"stdout","text":"Collecting ultralytics\n  Downloading ultralytics-8.3.169-py3-none-any.whl.metadata (37 kB)\nRequirement already satisfied: numpy>=1.23.0 in /usr/local/lib/python3.11/dist-packages (from ultralytics) (1.26.4)\nRequirement already satisfied: matplotlib>=3.3.0 in /usr/local/lib/python3.11/dist-packages (from ultralytics) (3.7.2)\nRequirement already satisfied: opencv-python>=4.6.0 in /usr/local/lib/python3.11/dist-packages (from ultralytics) (4.11.0.86)\nRequirement already satisfied: pillow>=7.1.2 in /usr/local/lib/python3.11/dist-packages (from ultralytics) (11.2.1)\nRequirement already satisfied: pyyaml>=5.3.1 in /usr/local/lib/python3.11/dist-packages (from ultralytics) (6.0.2)\nRequirement already satisfied: requests>=2.23.0 in /usr/local/lib/python3.11/dist-packages (from ultralytics) (2.32.4)\nRequirement already satisfied: scipy>=1.4.1 in /usr/local/lib/python3.11/dist-packages (from ultralytics) (1.15.3)\nRequirement already satisfied: torch>=1.8.0 in /usr/local/lib/python3.11/dist-packages (from ultralytics) (2.6.0+cu124)\nRequirement already satisfied: torchvision>=0.9.0 in /usr/local/lib/python3.11/dist-packages (from ultralytics) (0.21.0+cu124)\nRequirement already satisfied: tqdm>=4.64.0 in /usr/local/lib/python3.11/dist-packages (from ultralytics) (4.67.1)\nRequirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (from ultralytics) (7.0.0)\nRequirement already satisfied: py-cpuinfo in /usr/local/lib/python3.11/dist-packages (from ultralytics) (9.0.0)\nRequirement already satisfied: pandas>=1.1.4 in /usr/local/lib/python3.11/dist-packages (from ultralytics) (2.2.3)\nCollecting ultralytics-thop>=2.0.0 (from ultralytics)\n  Downloading ultralytics_thop-2.0.14-py3-none-any.whl.metadata (9.4 kB)\nRequirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3.0->ultralytics) (1.3.2)\nRequirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3.0->ultralytics) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3.0->ultralytics) (4.58.4)\nRequirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3.0->ultralytics) (1.4.8)\nRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3.0->ultralytics) (25.0)\nRequirement already satisfied: pyparsing<3.1,>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3.0->ultralytics) (3.0.9)\nRequirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.3.0->ultralytics) (2.9.0.post0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.0->ultralytics) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.0->ultralytics) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.0->ultralytics) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.0->ultralytics) (2025.2.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.0->ultralytics) (2022.2.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.23.0->ultralytics) (2.4.1)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.1.4->ultralytics) (2025.2)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.1.4->ultralytics) (2025.2)\nRequirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.23.0->ultralytics) (3.4.2)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.23.0->ultralytics) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.23.0->ultralytics) (2.5.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.23.0->ultralytics) (2025.6.15)\nRequirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch>=1.8.0->ultralytics) (3.18.0)\nRequirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch>=1.8.0->ultralytics) (4.14.0)\nRequirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=1.8.0->ultralytics) (3.5)\nRequirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.8.0->ultralytics) (3.1.6)\nRequirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch>=1.8.0->ultralytics) (2025.5.1)\nCollecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch>=1.8.0->ultralytics)\n  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\nCollecting nvidia-cuda-runtime-cu12==12.4.127 (from torch>=1.8.0->ultralytics)\n  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\nCollecting nvidia-cuda-cupti-cu12==12.4.127 (from torch>=1.8.0->ultralytics)\n  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\nCollecting nvidia-cudnn-cu12==9.1.0.70 (from torch>=1.8.0->ultralytics)\n  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\nCollecting nvidia-cublas-cu12==12.4.5.8 (from torch>=1.8.0->ultralytics)\n  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\nCollecting nvidia-cufft-cu12==11.2.1.3 (from torch>=1.8.0->ultralytics)\n  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\nCollecting nvidia-curand-cu12==10.3.5.147 (from torch>=1.8.0->ultralytics)\n  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\nCollecting nvidia-cusolver-cu12==11.6.1.9 (from torch>=1.8.0->ultralytics)\n  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\nCollecting nvidia-cusparse-cu12==12.3.1.170 (from torch>=1.8.0->ultralytics)\n  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\nRequirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch>=1.8.0->ultralytics) (0.6.2)\nRequirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=1.8.0->ultralytics) (2.21.5)\nRequirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=1.8.0->ultralytics) (12.4.127)\nCollecting nvidia-nvjitlink-cu12==12.4.127 (from torch>=1.8.0->ultralytics)\n  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\nRequirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=1.8.0->ultralytics) (3.2.0)\nRequirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=1.8.0->ultralytics) (1.13.1)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=1.8.0->ultralytics) (1.3.0)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib>=3.3.0->ultralytics) (1.17.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=1.8.0->ultralytics) (3.0.2)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.23.0->ultralytics) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.23.0->ultralytics) (2022.2.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.23.0->ultralytics) (1.4.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.23.0->ultralytics) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.23.0->ultralytics) (2024.2.0)\nDownloading ultralytics-8.3.169-py3-none-any.whl (1.0 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.0/1.0 MB\u001b[0m \u001b[31m17.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl (363.4 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (13.8 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m87.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m0:01\u001b[0m\n\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (24.6 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m59.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (883 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m50.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl (664.8 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl (211.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m6.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl (56.3 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m31.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl (127.9 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m13.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl (207.5 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m2.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m78.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading ultralytics_thop-2.0.14-py3-none-any.whl (26 kB)\nInstalling collected packages: nvidia-nvjitlink-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12, ultralytics-thop, ultralytics\n  Attempting uninstall: nvidia-nvjitlink-cu12\n    Found existing installation: nvidia-nvjitlink-cu12 12.5.82\n    Uninstalling nvidia-nvjitlink-cu12-12.5.82:\n      Successfully uninstalled nvidia-nvjitlink-cu12-12.5.82\n  Attempting uninstall: nvidia-curand-cu12\n    Found existing installation: nvidia-curand-cu12 10.3.6.82\n    Uninstalling nvidia-curand-cu12-10.3.6.82:\n      Successfully uninstalled nvidia-curand-cu12-10.3.6.82\n  Attempting uninstall: nvidia-cufft-cu12\n    Found existing installation: nvidia-cufft-cu12 11.2.3.61\n    Uninstalling nvidia-cufft-cu12-11.2.3.61:\n      Successfully uninstalled nvidia-cufft-cu12-11.2.3.61\n  Attempting uninstall: nvidia-cuda-runtime-cu12\n    Found existing installation: nvidia-cuda-runtime-cu12 12.5.82\n    Uninstalling nvidia-cuda-runtime-cu12-12.5.82:\n      Successfully uninstalled nvidia-cuda-runtime-cu12-12.5.82\n  Attempting uninstall: nvidia-cuda-nvrtc-cu12\n    Found existing installation: nvidia-cuda-nvrtc-cu12 12.5.82\n    Uninstalling nvidia-cuda-nvrtc-cu12-12.5.82:\n      Successfully uninstalled nvidia-cuda-nvrtc-cu12-12.5.82\n  Attempting uninstall: nvidia-cuda-cupti-cu12\n    Found existing installation: nvidia-cuda-cupti-cu12 12.5.82\n    Uninstalling nvidia-cuda-cupti-cu12-12.5.82:\n      Successfully uninstalled nvidia-cuda-cupti-cu12-12.5.82\n  Attempting uninstall: nvidia-cublas-cu12\n    Found existing installation: nvidia-cublas-cu12 12.5.3.2\n    Uninstalling nvidia-cublas-cu12-12.5.3.2:\n      Successfully uninstalled nvidia-cublas-cu12-12.5.3.2\n  Attempting uninstall: nvidia-cusparse-cu12\n    Found existing installation: nvidia-cusparse-cu12 12.5.1.3\n    Uninstalling nvidia-cusparse-cu12-12.5.1.3:\n      Successfully uninstalled nvidia-cusparse-cu12-12.5.1.3\n  Attempting uninstall: nvidia-cudnn-cu12\n    Found existing installation: nvidia-cudnn-cu12 9.3.0.75\n    Uninstalling nvidia-cudnn-cu12-9.3.0.75:\n      Successfully uninstalled nvidia-cudnn-cu12-9.3.0.75\n  Attempting uninstall: nvidia-cusolver-cu12\n    Found existing installation: nvidia-cusolver-cu12 11.6.3.83\n    Uninstalling nvidia-cusolver-cu12-11.6.3.83:\n      Successfully uninstalled nvidia-cusolver-cu12-11.6.3.83\nSuccessfully installed nvidia-cublas-cu12-12.4.5.8 nvidia-cuda-cupti-cu12-12.4.127 nvidia-cuda-nvrtc-cu12-12.4.127 nvidia-cuda-runtime-cu12-12.4.127 nvidia-cudnn-cu12-9.1.0.70 nvidia-cufft-cu12-11.2.1.3 nvidia-curand-cu12-10.3.5.147 nvidia-cusolver-cu12-11.6.1.9 nvidia-cusparse-cu12-12.3.1.170 nvidia-nvjitlink-cu12-12.4.127 ultralytics-8.3.169 ultralytics-thop-2.0.14\nRequirement already satisfied: wandb in /usr/local/lib/python3.11/dist-packages (0.20.1)\nRequirement already satisfied: click!=8.0.0,>=7.1 in /usr/local/lib/python3.11/dist-packages (from wandb) (8.2.1)\nRequirement already satisfied: gitpython!=3.1.29,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (3.1.44)\nRequirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from wandb) (25.0)\nRequirement already satisfied: platformdirs in /usr/local/lib/python3.11/dist-packages (from wandb) (4.3.8)\nRequirement already satisfied: protobuf!=4.21.0,!=5.28.0,<7,>=3.19.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (3.20.3)\nRequirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (7.0.0)\nRequirement already satisfied: pydantic<3 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.11.7)\nRequirement already satisfied: pyyaml in /usr/local/lib/python3.11/dist-packages (from wandb) (6.0.2)\nRequirement already satisfied: requests<3,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.32.4)\nRequirement already satisfied: sentry-sdk>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb) (2.31.0)\nRequirement already satisfied: setproctitle in /usr/local/lib/python3.11/dist-packages (from wandb) (1.3.6)\nRequirement already satisfied: typing-extensions<5,>=4.8 in /usr/local/lib/python3.11/dist-packages (from wandb) (4.14.0)\nRequirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.29,>=1.0.0->wandb) (4.0.12)\nRequirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb) (0.7.0)\nRequirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb) (2.33.2)\nRequirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb) (0.4.1)\nRequirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (3.4.2)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (2.5.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.0.0->wandb) (2025.6.15)\nRequirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.29,>=1.0.0->wandb) (5.0.2)\nCreating new Ultralytics Settings v0.0.6 file ✅ \nView Ultralytics Settings with 'yolo settings' or at '/root/.config/Ultralytics/settings.json'\nUpdate Settings with 'yolo settings key=value', i.e. 'yolo settings runs_dir=path/to/dir'. For help see https://docs.ultralytics.com/quickstart/#ultralytics-settings.\n✅ Updated 'wandb=True'\nJSONDict(\"/root/.config/Ultralytics/settings.json\"):\n{\n  \"settings_version\": \"0.0.6\",\n  \"datasets_dir\": \"/kaggle/working/datasets\",\n  \"weights_dir\": \"weights\",\n  \"runs_dir\": \"runs\",\n  \"uuid\": \"1bfc3e992d24318da58ddee183be5bf9388a31f26bab1738e986ec4d297417ff\",\n  \"sync\": true,\n  \"api_key\": \"\",\n  \"openai_api_key\": \"\",\n  \"clearml\": true,\n  \"comet\": true,\n  \"dvc\": true,\n  \"hub\": true,\n  \"mlflow\": true,\n  \"neptune\": true,\n  \"raytune\": true,\n  \"tensorboard\": false,\n  \"wandb\": true,\n  \"vscode_msg\": true,\n  \"openvino_msg\": true\n}\n💡 Learn more about Ultralytics Settings at https://docs.ultralytics.com/quickstart/#ultralytics-settings\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m If you're specifying your api key in code, ensure this code is not shared publicly.\n\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.\n\u001b[34m\u001b[1mwandb\u001b[0m: No netrc file found, creating one.\n\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mdontdodataa\u001b[0m (\u001b[33mdontdodataa-igor-sikorsky-kyiv-polytechnic-institute\u001b[0m) to \u001b[32mhttps://api.wandb.ai\u001b[0m. Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n","output_type":"stream"},{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}],"execution_count":1},{"cell_type":"code","source":"import os\nimport csv\nimport glob\nimport shutil\nimport random\nfrom pathlib import Path\n#/kaggle/input/uadamage-demining-competition/train\n# Config\nBASE_DIR = \"/kaggle/input/uadamage-demining-competition/\"\nBASE_OUTPUT_DIR = \"/kaggle/working/\"\nANNOTATIONS_DIR = BASE_DIR + \"train/annotations\"\nIMAGES_DIR = BASE_DIR + \"train/images\"\nOUTPUT_LABELS_DIR = BASE_OUTPUT_DIR + \"labels\"\nOUTPUT_IMAGES_DIR = BASE_OUTPUT_DIR + \"images\"\nTRAIN_SPLIT = 0.8\n\n# Make output directories\n(Path(OUTPUT_LABELS_DIR) / \"train\").mkdir(parents=True, exist_ok=True)\n(Path(OUTPUT_LABELS_DIR) / \"val\").mkdir(parents=True, exist_ok=True)\n(Path(OUTPUT_IMAGES_DIR) / \"train\").mkdir(parents=True, exist_ok=True)\n(Path(OUTPUT_IMAGES_DIR) / \"val\").mkdir(parents=True, exist_ok=True)\n\n# Collect all CSV annotation files\ncsv_files = glob.glob(os.path.join(ANNOTATIONS_DIR, \"*.csv\"))\n\n# Shuffle and split\nrandom.shuffle(csv_files)\nsplit_idx = int(len(csv_files) * TRAIN_SPLIT)\ntrain_files = csv_files[:split_idx]\nval_files = csv_files[split_idx:]\n\ndef convert_and_save(csv_path, label_output_dir, image_output_dir):\n    with open(csv_path, newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        yolo_lines = []\n        image_name = None\n        for row in reader:\n            image_name = row[\"image_id\"]\n            x = float(row[\"x\"])\n            y = float(row[\"y\"])\n            w = float(row[\"width\"])\n            h = float(row[\"height\"])\n            img_w = float(row[\"image_width\"])\n            img_h = float(row[\"image_height\"])\n            cls = row[\"label\"]\n\n            # Convert to YOLO format: normalized center x, y, width, height\n            x_center = (x + w / 2) / img_w\n            y_center = (y + h / 2) / img_h\n            w_norm = w / img_w\n            h_norm = h / img_h\n\n            yolo_line = f\"{cls} {x_center:.6f} {y_center:.6f} {w_norm:.6f} {h_norm:.6f}\"\n            yolo_lines.append(yolo_line)\n\n        if image_name:\n            # Save label file\n            label_path = os.path.join(label_output_dir, f\"{image_name}.txt\")\n            with open(label_path, \"w\") as f:\n                f.write(\"\\n\".join(yolo_lines))\n\n            # Copy image file to appropriate folder\n            for ext in [\".jpg\", \".png\"]:\n                image_path = os.path.join(IMAGES_DIR, f\"{image_name}{ext}\")\n                if os.path.exists(image_path):\n                    shutil.copy(image_path, os.path.join(image_output_dir, f\"{image_name}{ext}\"))\n                    break\n\n# Convert files\nfor file in train_files:\n    convert_and_save(file, f\"{OUTPUT_LABELS_DIR}/train\", f\"{OUTPUT_IMAGES_DIR}/train\")\n\nfor file in val_files:\n    convert_and_save(file, f\"{OUTPUT_LABELS_DIR}/val\", f\"{OUTPUT_IMAGES_DIR}/val\")\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-26T07:28:56.163437Z","iopub.execute_input":"2025-07-26T07:28:56.164111Z","iopub.status.idle":"2025-07-26T07:32:16.334523Z","shell.execute_reply.started":"2025-07-26T07:28:56.164088Z","shell.execute_reply":"2025-07-26T07:32:16.333887Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"import os\nimport cv2\nfrom tqdm import tqdm\n\n# Configuration\ninput_image_dirs = [BASE_OUTPUT_DIR + 'images/train', BASE_OUTPUT_DIR + 'images/val']\ninput_label_dirs = [BASE_OUTPUT_DIR+'labels/train', 'labels/val']\noutput_image_root = 'cropped/images'\noutput_label_root = 'cropped/labels'\ntile_size = 640\noverlap = 80\n\nos.makedirs(output_image_root, exist_ok=True)\nos.makedirs(output_label_root, exist_ok=True)\n\ndef ensure_dir(path):\n    os.makedirs(os.path.dirname(path), exist_ok=True)\n\ndef crop_and_save(image, label_lines, img_path, label_path, save_prefix):\n    h, w = image.shape[:2]\n    h_effective = max(h, tile_size)\n    w_effective = max(w, tile_size)\n\n    stride_x = tile_size - overlap\n    stride_y = tile_size - overlap\n\n    num_x = max(1, (w_effective - overlap) // stride_x)\n    num_y = max(1, (h_effective - overlap) // stride_y)\n\n    for y_idx in range(num_y):\n        for x_idx in range(num_x):\n            x_start = min(x_idx * stride_x, w - tile_size) if w > tile_size else 0\n            y_start = min(y_idx * stride_y, h - tile_size) if h > tile_size else 0\n            x_end = x_start + tile_size\n            y_end = y_start + tile_size\n\n            tile = image[y_start:y_end, x_start:x_end]\n            tile_h, tile_w = tile.shape[:2]\n            tile_labels = []\n\n            for line in label_lines:\n                cls, x_center, y_center, w_norm, h_norm = map(float, line.strip().split())\n                abs_x = x_center * w\n                abs_y = y_center * h\n                abs_w = w_norm * w\n                abs_h = h_norm * h\n\n                x0 = abs_x - abs_w / 2\n                y0 = abs_y - abs_h / 2\n                x1 = abs_x + abs_w / 2\n                y1 = abs_y + abs_h / 2\n\n                # Check if object is within the current tile\n                if x1 < x_start or x0 > x_end or y1 < y_start or y0 > y_end:\n                    continue\n\n                # Clip to the tile bounds\n                clipped_x0 = max(x0, x_start)\n                clipped_y0 = max(y0, y_start)\n                clipped_x1 = min(x1, x_end)\n                clipped_y1 = min(y1, y_end)\n\n                # Convert to tile-relative YOLO format\n                new_w = clipped_x1 - clipped_x0\n                new_h = clipped_y1 - clipped_y0\n                new_x_center = (clipped_x0 + new_w / 2) - x_start\n                new_y_center = (clipped_y0 + new_h / 2) - y_start\n\n                tile_labels.append(f\"{int(cls)} {new_x_center/tile_w:.6f} {new_y_center/tile_h:.6f} {new_w/tile_w:.6f} {new_h/tile_h:.6f}\")\n\n            # Save tile and labels\n            tile_name = f\"{save_prefix}_x{x_idx}_y{y_idx}\"\n            image_out_path = os.path.join(output_image_root, tile_name + '.jpg')\n            label_out_path = os.path.join(output_label_root, tile_name + '.txt')\n\n            ensure_dir(image_out_path)\n            ensure_dir(label_out_path)\n            cv2.imwrite(image_out_path, tile)\n\n            with open(label_out_path, 'w') as f:\n                f.write(\"\\n\".join(tile_labels))\n\n    # Delete original files to save space\n    os.remove(img_path)\n    if os.path.exists(label_path):\n        os.remove(label_path)\n\nfor img_dir, lbl_dir in zip(input_image_dirs, input_label_dirs):\n    image_files = [f for f in os.listdir(img_dir) if f.endswith(('.jpg', '.png'))]\n\n    for img_file in tqdm(image_files, desc=f\"Processing {img_dir}\"):\n        image_path = os.path.join(img_dir, img_file)\n        label_path = os.path.join(lbl_dir, os.path.splitext(img_file)[0] + '.txt')\n\n        image = cv2.imread(image_path)\n        if image is None:\n            continue\n\n        if os.path.exists(label_path):\n            with open(label_path, 'r') as f:\n                label_lines = f.readlines()\n        else:\n            label_lines = []\n\n        save_prefix = os.path.splitext(img_file)[0]\n        crop_and_save(image, label_lines, image_path, label_path, save_prefix)\n\nprint(\"✅ Cropping complete. Original files deleted.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-26T09:10:25.050054Z","iopub.execute_input":"2025-07-26T09:10:25.050682Z","iopub.status.idle":"2025-07-26T09:17:15.057580Z","shell.execute_reply.started":"2025-07-26T09:10:25.050652Z","shell.execute_reply":"2025-07-26T09:17:15.056602Z"}},"outputs":[{"name":"stderr","text":"Processing /kaggle/working/images/train:  87%|████████▋ | 1793/2064 [06:49<01:01,  4.37it/s]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/678948635.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    101\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    102\u001b[0m         \u001b[0msave_prefix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplitext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 103\u001b[0;31m         \u001b[0mcrop_and_save\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel_lines\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimage_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msave_prefix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    104\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"✅ Cropping complete. Original files deleted.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_36/678948635.py\u001b[0m in \u001b[0;36mcrop_and_save\u001b[0;34m(image, label_lines, img_path, label_path, save_prefix)\u001b[0m\n\u001b[1;32m     75\u001b[0m             \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage_out_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 77\u001b[0;31m             \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel_out_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'w'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     78\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtile_labels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mOSError\u001b[0m: [Errno 28] No space left on device: '/kaggle/working/cropped/labels/3e412e4f8f2464778c001bb1f87f93ab86f5aace2969f40fbef5a2520aac6271_x3_y5.txt'"],"ename":"OSError","evalue":"[Errno 28] No space left on device: '/kaggle/working/cropped/labels/3e412e4f8f2464778c001bb1f87f93ab86f5aace2969f40fbef5a2520aac6271_x3_y5.txt'","output_type":"error"}],"execution_count":11},{"cell_type":"code","source":"yaml_content = \"\"\"\npath: /kaggle/working\ntrain: cropped/images/train\nval: cropped/images/val\n\nnames:\n  0: Explosives\n  1: Anti-personnel mine\n  2: Anti-vehicle mine\n\"\"\"\n\nwith open(\"/kaggle/working/dataset.yaml\", \"w\") as f:\n    f.write(yaml_content.strip() + \"\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-26T07:40:33.173367Z","iopub.execute_input":"2025-07-26T07:40:33.174112Z","iopub.status.idle":"2025-07-26T07:40:33.177958Z","shell.execute_reply.started":"2025-07-26T07:40:33.174088Z","shell.execute_reply":"2025-07-26T07:40:33.177403Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"from ultralytics import YOLO\nmodel = YOLO(\"yolo12m.pt\")\nresults = model.train(data=\"/kaggle/working/dataset.yaml\", epochs=100,\n                      project=\"yolo\", name=\"yolo12m\", batch=8, device=[0,1], save_period = 5, mosaic=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-26T07:40:37.505581Z","iopub.execute_input":"2025-07-26T07:40:37.506167Z","iopub.status.idle":"2025-07-26T09:09:59.479745Z","shell.execute_reply.started":"2025-07-26T07:40:37.506144Z","shell.execute_reply":"2025-07-26T09:09:59.475271Z"}},"outputs":[{"name":"stdout","text":"Ultralytics 8.3.169 🚀 Python-3.11.13 torch-2.6.0+cu124 CUDA:0 (Tesla T4, 15095MiB)\n                                                        CUDA:1 (Tesla T4, 15095MiB)\n\u001b[34m\u001b[1mengine/trainer: \u001b[0magnostic_nms=False, amp=True, augment=False, auto_augment=randaugment, batch=8, bgr=0.0, box=7.5, cache=False, cfg=None, classes=None, close_mosaic=10, cls=0.5, conf=None, copy_paste=0.0, copy_paste_mode=flip, cos_lr=False, cutmix=0.0, data=/kaggle/working/dataset.yaml, degrees=0.0, deterministic=True, device=0,1, dfl=1.5, dnn=False, dropout=0.0, dynamic=False, embed=None, epochs=100, erasing=0.4, exist_ok=False, fliplr=0.5, flipud=0.0, format=torchscript, fraction=1.0, freeze=None, half=False, hsv_h=0.015, hsv_s=0.7, hsv_v=0.4, imgsz=640, int8=False, iou=0.7, keras=False, kobj=1.0, line_width=None, lr0=0.01, lrf=0.01, mask_ratio=4, max_det=300, mixup=0.0, mode=train, model=yolo12x.pt, momentum=0.937, mosaic=1.0, multi_scale=False, name=yolo12x2, nbs=64, nms=False, opset=None, optimize=False, optimizer=auto, overlap_mask=True, patience=100, perspective=0.0, plots=True, pose=12.0, pretrained=True, profile=False, project=yolo, rect=False, resume=False, retina_masks=False, save=True, save_conf=False, save_crop=False, save_dir=yolo/yolo12x2, save_frames=False, save_json=False, save_period=5, save_txt=False, scale=0.5, seed=0, shear=0.0, show=False, show_boxes=True, show_conf=True, show_labels=True, simplify=True, single_cls=False, source=None, split=val, stream_buffer=False, task=detect, time=None, tracker=botsort.yaml, translate=0.1, val=True, verbose=True, vid_stride=1, visualize=False, warmup_bias_lr=0.1, warmup_epochs=3.0, warmup_momentum=0.8, weight_decay=0.0005, workers=8, workspace=None\nOverriding model.yaml nc=80 with nc=3\n\n                   from  n    params  module                                       arguments                     \n  0                  -1  1      2784  ultralytics.nn.modules.conv.Conv             [3, 96, 3, 2]                 \n  1                  -1  1    166272  ultralytics.nn.modules.conv.Conv             [96, 192, 3, 2]               \n  2                  -1  2    389760  ultralytics.nn.modules.block.C3k2            [192, 384, 2, True, 0.25]     \n  3                  -1  1   1327872  ultralytics.nn.modules.conv.Conv             [384, 384, 3, 2]              \n  4                  -1  2   1553664  ultralytics.nn.modules.block.C3k2            [384, 768, 2, True, 0.25]     \n  5                  -1  1   5309952  ultralytics.nn.modules.conv.Conv             [768, 768, 3, 2]              \n  6                  -1  4   9512128  ultralytics.nn.modules.block.A2C2f           [768, 768, 4, True, 4, True, 1.2]\n  7                  -1  1   5309952  ultralytics.nn.modules.conv.Conv             [768, 768, 3, 2]              \n  8                  -1  4   9512128  ultralytics.nn.modules.block.A2C2f           [768, 768, 4, True, 1, True, 1.2]\n  9                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n 10             [-1, 6]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 11                  -1  2   4727040  ultralytics.nn.modules.block.A2C2f           [1536, 768, 2, False, -1, True, 1.2]\n 12                  -1  1         0  torch.nn.modules.upsampling.Upsample         [None, 2, 'nearest']          \n 13             [-1, 4]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 14                  -1  2   1331328  ultralytics.nn.modules.block.A2C2f           [1536, 384, 2, False, -1, True, 1.2]\n 15                  -1  1   1327872  ultralytics.nn.modules.conv.Conv             [384, 384, 3, 2]              \n 16            [-1, 11]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 17                  -1  2   4579584  ultralytics.nn.modules.block.A2C2f           [1152, 768, 2, False, -1, True, 1.2]\n 18                  -1  1   5309952  ultralytics.nn.modules.conv.Conv             [768, 768, 3, 2]              \n 19             [-1, 8]  1         0  ultralytics.nn.modules.conv.Concat           [1]                           \n 20                  -1  2   5612544  ultralytics.nn.modules.block.C3k2            [1536, 768, 2, True]          \n 21        [14, 17, 20]  1   3149017  ultralytics.nn.modules.head.Detect           [3, [384, 768, 768]]          \nYOLOv12x summary: 488 layers, 59,121,849 parameters, 59,121,833 gradients, 199.8 GFLOPs\n\nTransferred 1239/1245 items from pretrained weights\n\u001b[34m\u001b[1mDDP:\u001b[0m debug command /usr/bin/python3 -m torch.distributed.run --nproc_per_node 2 --master_port 44343 /root/.config/Ultralytics/DDP/_temp_yfal1ju2133164830619856.py\nUltralytics 8.3.169 🚀 Python-3.11.13 torch-2.6.0+cu124 CUDA:0 (Tesla T4, 15095MiB)\n                                                        CUDA:1 (Tesla T4, 15095MiB)\n","output_type":"stream"},{"name":"stderr","text":"wandb: Currently logged in as: dontdodataa (dontdodataa-igor-sikorsky-kyiv-polytechnic-institute) to https://api.wandb.ai. Use `wandb login --relogin` to force relogin\nwandb: Tracking run with wandb version 0.20.1\nwandb: Run data is saved locally in /kaggle/working/wandb/run-20250726_074045-ejvyy0hj\nwandb: Run `wandb offline` to turn off syncing.\nwandb: Syncing run yolo12x2\nwandb: ⭐️ View project at https://wandb.ai/dontdodataa-igor-sikorsky-kyiv-polytechnic-institute/yolo\nwandb: 🚀 View run at https://wandb.ai/dontdodataa-igor-sikorsky-kyiv-polytechnic-institute/yolo/runs/ejvyy0hj\n","output_type":"stream"},{"name":"stdout","text":"Overriding model.yaml nc=80 with nc=3\nTransferred 1239/1245 items from pretrained weights\nFreezing layer 'model.21.dfl.conv.weight'\n\u001b[34m\u001b[1mAMP: \u001b[0mrunning Automatic Mixed Precision (AMP) checks...\n\u001b[34m\u001b[1mAMP: \u001b[0mchecks passed ✅\n\u001b[34m\u001b[1mtrain: \u001b[0mFast image access ✅ (ping: 0.0±0.0 ms, read: 1764.1±1173.3 MB/s, size: 5209.8 KB)\n\u001b[34m\u001b[1mtrain: \u001b[0m/kaggle/working/images/train/1de64c4be261f200c1bf2a653e7db5bb65a2571c5a3e54dcc2cbba7d64909a09.jpg: 1 duplicate labels removed\n\u001b[34m\u001b[1mtrain: \u001b[0m/kaggle/working/images/train/6dc3361a9305b1ea540db4d136a74b32d5d7026b4b385511c6caa0154d2f534e.jpg: 1 duplicate labels removed\n\u001b[34m\u001b[1mtrain: \u001b[0m/kaggle/working/images/train/dadc2f217dfdafd15b76bebfc6a72cf9f770e84521530158e2a95d8862be7089.jpg: 2 duplicate labels removed\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mtrain: \u001b[0mScanning /kaggle/working/labels/train.cache... 2064 images, 0 backgrounds, 0 corrupt: 100%|██████████| 2064/2064 [00:00<?, ?it/s]\n","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1malbumentations: \u001b[0mBlur(p=0.01, blur_limit=(3, 7)), MedianBlur(p=0.01, blur_limit=(3, 7)), ToGray(p=0.01, method='weighted_average', num_output_channels=3), CLAHE(p=0.01, clip_limit=(1.0, 4.0), tile_grid_size=(8, 8))\n\u001b[34m\u001b[1mval: \u001b[0mFast image access ✅ (ping: 0.0±0.0 ms, read: 2799.5±2096.7 MB/s, size: 5059.9 KB)\n","output_type":"stream"},{"name":"stderr","text":"\u001b[34m\u001b[1mval: \u001b[0mScanning /kaggle/working/labels/val... 507 images, 0 backgrounds, 0 corrupt: 100%|██████████| 507/507 [00:00<00:00, 1130.04it/s]\n","output_type":"stream"},{"name":"stdout","text":"\u001b[34m\u001b[1mval: \u001b[0m/kaggle/working/images/val/d379fcef5ca440d8843cba668addecda9a70cfa65ef66355ffaf5da8879a2ed6.jpg: 1 duplicate labels removed\n\u001b[34m\u001b[1mval: \u001b[0mNew cache created: /kaggle/working/labels/val.cache\nPlotting labels to yolo/yolo12x2/labels.jpg... \n\u001b[34m\u001b[1moptimizer:\u001b[0m 'optimizer=auto' found, ignoring 'lr0=0.01' and 'momentum=0.937' and determining best 'optimizer', 'lr0' and 'momentum' automatically... \n\u001b[34m\u001b[1moptimizer:\u001b[0m AdamW(lr=0.001429, momentum=0.9) with parameter groups 205 weight(decay=0.0), 214 weight(decay=0.0005), 211 bias(decay=0.0)\nImage sizes 640 train, 640 val\nUsing 4 dataloader workers\nLogging results to \u001b[1myolo/yolo12x2\u001b[0m\nStarting training for 100 epochs...\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      1/100      7.22G      2.217      3.585      1.088          8        640: 100%|██████████| 258/258 [02:58<00:00,  1.45it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:42<00:00,  1.49it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935     0.0392     0.0574    0.00283   0.000965\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      2/100      7.41G      2.573      2.696      1.211         16        640: 100%|██████████| 258/258 [02:55<00:00,  1.47it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:41<00:00,  1.55it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.399      0.162      0.178     0.0812\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      3/100      7.75G      2.487      2.539      1.169         12        640: 100%|██████████| 258/258 [02:51<00:00,  1.51it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:43<00:00,  1.47it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.754      0.134      0.164     0.0779\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      4/100      7.74G      2.423      2.666      1.155          8        640: 100%|██████████| 258/258 [02:50<00:00,  1.51it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:42<00:00,  1.50it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.604      0.198      0.194      0.109\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      5/100      7.75G      2.312       2.42      1.119          9        640: 100%|██████████| 258/258 [02:49<00:00,  1.52it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:35<00:00,  1.78it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.738      0.187      0.209      0.106\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      6/100      7.65G      2.212      2.203      1.115          9        640: 100%|██████████| 258/258 [02:48<00:00,  1.53it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:41<00:00,  1.56it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.509      0.233      0.232      0.124\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      7/100      7.73G      2.206      2.237       1.07          6        640: 100%|██████████| 258/258 [02:47<00:00,  1.54it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:35<00:00,  1.79it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.576       0.21      0.218     0.0881\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      8/100      7.74G      2.141      2.041      1.064          3        640: 100%|██████████| 258/258 [02:47<00:00,  1.54it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:34<00:00,  1.86it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.778      0.236      0.274       0.13\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"      9/100      7.75G      2.062      1.989       1.04         30        640: 100%|██████████| 258/258 [02:44<00:00,  1.57it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:40<00:00,  1.56it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.751      0.249      0.287      0.156\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     10/100      7.66G      2.014      2.083      1.057         10        640: 100%|██████████| 258/258 [02:46<00:00,  1.55it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:36<00:00,  1.76it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.447      0.295      0.289      0.154\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     11/100      7.73G      1.994      1.856      1.007         23        640: 100%|██████████| 258/258 [02:49<00:00,  1.52it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:36<00:00,  1.74it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.423      0.304      0.288       0.15\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     12/100      7.75G      1.888      1.801      1.004         20        640: 100%|██████████| 258/258 [02:47<00:00,  1.54it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:36<00:00,  1.76it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.523      0.309      0.314      0.166\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     13/100      7.74G      1.921      1.908     0.9817         12        640: 100%|██████████| 258/258 [02:46<00:00,  1.55it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:39<00:00,  1.64it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.467      0.273      0.271      0.149\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     14/100      7.74G      1.955      1.945      1.013         16        640: 100%|██████████| 258/258 [02:50<00:00,  1.51it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:41<00:00,  1.56it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935       0.49      0.336      0.314       0.16\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     15/100      7.75G      1.952       1.91      1.003         14        640: 100%|██████████| 258/258 [02:49<00:00,  1.52it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:38<00:00,  1.67it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.539      0.318      0.316      0.161\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     16/100      7.74G      1.944      1.873     0.9898         12        640: 100%|██████████| 258/258 [02:50<00:00,  1.51it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:35<00:00,  1.81it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.517      0.341      0.352      0.193\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     17/100      7.74G      1.896      1.734     0.9897          5        640: 100%|██████████| 258/258 [02:49<00:00,  1.52it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:40<00:00,  1.58it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.549      0.359      0.352      0.191\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     18/100      7.66G      1.934      1.793      1.013         19        640: 100%|██████████| 258/258 [02:48<00:00,  1.53it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:38<00:00,  1.64it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.577      0.348      0.364      0.209\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     19/100      7.74G      1.803      1.702      0.979         11        640: 100%|██████████| 258/258 [02:49<00:00,  1.53it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:34<00:00,  1.87it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.607      0.329      0.337      0.175\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     20/100      7.74G      1.886      1.803     0.9811          9        640: 100%|██████████| 258/258 [02:48<00:00,  1.53it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:41<00:00,  1.56it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.565      0.357      0.354      0.185\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     21/100      7.73G      1.818      1.723     0.9633         14        640: 100%|██████████| 258/258 [02:49<00:00,  1.52it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:39<00:00,  1.61it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.579      0.351      0.372      0.208\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     22/100      7.66G      1.789      1.617     0.9732          9        640: 100%|██████████| 258/258 [02:49<00:00,  1.52it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:35<00:00,  1.79it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.595      0.355      0.376      0.207\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     23/100      7.75G      1.716      1.531     0.9536        162        640: 100%|██████████| 258/258 [02:50<00:00,  1.52it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:42<00:00,  1.51it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935       0.59      0.367      0.362      0.205\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     24/100      7.75G      1.721      1.595      0.954         17        640: 100%|██████████| 258/258 [02:52<00:00,  1.50it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:37<00:00,  1.70it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935       0.61      0.372      0.386      0.216\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     25/100      7.75G      1.712      1.587     0.9748          6        640: 100%|██████████| 258/258 [02:48<00:00,  1.53it/s]\n                 Class     Images  Instances      Box(P          R      mAP50  mAP50-95): 100%|██████████| 64/64 [00:37<00:00,  1.72it/s]\n","output_type":"stream"},{"name":"stdout","text":"                   all        507       1935      0.698      0.363      0.391      0.216\n\n      Epoch    GPU_mem   box_loss   cls_loss   dfl_loss  Instances       Size\n","output_type":"stream"},{"name":"stderr","text":"     26/100      7.74G      1.724      1.665     0.9912         12        640:  29%|██▉       | 76/258 [00:50<01:54,  1.60it/s]W0726 09:09:59.184000 202 torch/distributed/elastic/agent/server/api.py:719] Received 2 death signal, shutting down workers\nW0726 09:09:59.185000 202 torch/distributed/elastic/multiprocessing/api.py:897] Sending process 204 closing signal SIGINT\nW0726 09:09:59.186000 202 torch/distributed/elastic/multiprocessing/api.py:897] Sending process 205 closing signal SIGINT\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/416444863.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0multralytics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mYOLO\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mYOLO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"yolo12x.pt\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m results = model.train(data=\"/kaggle/working/dataset.yaml\", epochs=100,\n\u001b[0m\u001b[1;32m      4\u001b[0m                       project=\"yolo\", name=\"yolo12x\", batch=8, device=[0,1], save_period = 5)\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ultralytics/engine/model.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self, trainer, **kwargs)\u001b[0m\n\u001b[1;32m    797\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    798\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhub_session\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m  \u001b[0;31m# attach optional HUB session\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 799\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrainer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    800\u001b[0m         \u001b[0;31m# Update model and cfg after training\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    801\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mRANK\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/ultralytics/engine/trainer.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    218\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m                 \u001b[0mLOGGER\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{colorstr('DDP:')} debug command {' '.join(cmd)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m                 \u001b[0msubprocess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcmd\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    221\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/subprocess.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(input, capture_output, timeout, check, *popenargs, **kwargs)\u001b[0m\n\u001b[1;32m    548\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mPopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mpopenargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mprocess\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    549\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 550\u001b[0;31m             \u001b[0mstdout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstderr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommunicate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    551\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTimeoutExpired\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    552\u001b[0m             \u001b[0mprocess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkill\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/subprocess.py\u001b[0m in \u001b[0;36mcommunicate\u001b[0;34m(self, input, timeout)\u001b[0m\n\u001b[1;32m   1199\u001b[0m                 \u001b[0mstderr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstderr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1200\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstderr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1201\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1202\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1203\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/subprocess.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m   1262\u001b[0m             \u001b[0mendtime\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_time\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1263\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1264\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1265\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1266\u001b[0m             \u001b[0;31m# https://bugs.python.org/issue25942\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/subprocess.py\u001b[0m in \u001b[0;36m_wait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m   2051\u001b[0m                         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturncode\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2052\u001b[0m                             \u001b[0;32mbreak\u001b[0m  \u001b[0;31m# Another thread waited.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2053\u001b[0;31m                         \u001b[0;34m(\u001b[0m\u001b[0mpid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msts\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_try_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2054\u001b[0m                         \u001b[0;31m# Check the pid and loop as waitpid has been known to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2055\u001b[0m                         \u001b[0;31m# return 0 even without WNOHANG in odd situations.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/subprocess.py\u001b[0m in \u001b[0;36m_try_wait\u001b[0;34m(self, wait_flags)\u001b[0m\n\u001b[1;32m   2009\u001b[0m             \u001b[0;34m\"\"\"All callers to this function MUST hold self._waitpid_lock.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2010\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2011\u001b[0;31m                 \u001b[0;34m(\u001b[0m\u001b[0mpid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msts\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwaitpid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwait_flags\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2012\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mChildProcessError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2013\u001b[0m                 \u001b[0;31m# This happens if SIGCLD is set to be ignored or waiting\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}],"execution_count":10},{"cell_type":"code","source":"augmentation = {\n\n    \n}","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}